#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jul 20 15:24:11 2015 by generateDS.py version 2.16a.
#
# Command line options:
#   ('-o', 'timeml_parser.py')
#
# Command line arguments:
#   ../../data/TimeML/timeml_schema.xsd
#
# Command line:
#   ../../tools/generateDS-2.16a0/generateDS.py -o "timeml_parser.py" ../../data/TimeML/timeml_schema.xsd
#
# Current working directory (os.getcwd()):
#   utils
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TimeML(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.original_tagname_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TimeML.subclass:
            return TimeML.subclass(*args_, **kwargs_)
        else:
            return TimeML(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TimeML', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeML')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TimeML', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TimeML'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TimeML', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='TimeML'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TimeML


class EVENT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, polarity='POS', mood=None, modality=None, pos=None, stem=None, tense=None, eid=None, aspect=None, sentID=None, ont_type=None, vform=None, voice=None, class_=None, valueOf_=None):
        self.original_tagname_ = None
        self.polarity = _cast(None, polarity)
        self.mood = _cast(None, mood)
        self.modality = _cast(None, modality)
        self.pos = _cast(None, pos)
        self.stem = _cast(None, stem)
        self.tense = _cast(None, tense)
        self.eid = _cast(None, eid)
        self.aspect = _cast(None, aspect)
        self.sentID = _cast(int, sentID)
        self.ont_type = _cast(None, ont_type)
        self.vform = _cast(None, vform)
        self.voice = _cast(None, voice)
        self.class_ = _cast(None, class_)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if EVENT.subclass:
            return EVENT.subclass(*args_, **kwargs_)
        else:
            return EVENT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_polarity(self): return self.polarity
    def set_polarity(self, polarity): self.polarity = polarity
    def get_mood(self): return self.mood
    def set_mood(self, mood): self.mood = mood
    def get_modality(self): return self.modality
    def set_modality(self, modality): self.modality = modality
    def get_pos(self): return self.pos
    def set_pos(self, pos): self.pos = pos
    def get_stem(self): return self.stem
    def set_stem(self, stem): self.stem = stem
    def get_tense(self): return self.tense
    def set_tense(self, tense): self.tense = tense
    def get_eid(self): return self.eid
    def set_eid(self, eid): self.eid = eid
    def get_aspect(self): return self.aspect
    def set_aspect(self, aspect): self.aspect = aspect
    def get_sentID(self): return self.sentID
    def set_sentID(self, sentID): self.sentID = sentID
    def get_ont_type(self): return self.ont_type
    def set_ont_type(self, ont_type): self.ont_type = ont_type
    def get_vform(self): return self.vform
    def set_vform(self, vform): self.vform = vform
    def get_voice(self): return self.voice
    def set_voice(self, voice): self.voice = voice
    def get_class(self): return self.class_
    def set_class(self, class_): self.class_ = class_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_EventID(self, value):
        # Validate type EventID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventID_patterns_, ))
    validate_EventID_patterns_ = [['^e\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EVENT', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EVENT')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EVENT', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EVENT'):
        if self.polarity != "POS" and 'polarity' not in already_processed:
            already_processed.add('polarity')
            outfile.write(' polarity=%s' % (self.gds_format_string(quote_attrib(self.polarity).encode(ExternalEncoding), input_name='polarity'), ))
        if self.mood is not None and 'mood' not in already_processed:
            already_processed.add('mood')
            outfile.write(' mood=%s' % (self.gds_format_string(quote_attrib(self.mood).encode(ExternalEncoding), input_name='mood'), ))
        if self.modality is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            outfile.write(' modality=%s' % (self.gds_format_string(quote_attrib(self.modality).encode(ExternalEncoding), input_name='modality'), ))
        if self.pos is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            outfile.write(' pos=%s' % (self.gds_format_string(quote_attrib(self.pos).encode(ExternalEncoding), input_name='pos'), ))
        if self.stem is not None and 'stem' not in already_processed:
            already_processed.add('stem')
            outfile.write(' stem=%s' % (self.gds_format_string(quote_attrib(self.stem).encode(ExternalEncoding), input_name='stem'), ))
        if self.tense is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            outfile.write(' tense=%s' % (self.gds_format_string(quote_attrib(self.tense).encode(ExternalEncoding), input_name='tense'), ))
        if self.eid is not None and 'eid' not in already_processed:
            already_processed.add('eid')
            outfile.write(' eid=%s' % (quote_attrib(self.eid), ))
        if self.aspect is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            outfile.write(' aspect=%s' % (self.gds_format_string(quote_attrib(self.aspect).encode(ExternalEncoding), input_name='aspect'), ))
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            outfile.write(' sentID="%s"' % self.gds_format_integer(self.sentID, input_name='sentID'))
        if self.ont_type is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            outfile.write(' ont_type=%s' % (self.gds_format_string(quote_attrib(self.ont_type).encode(ExternalEncoding), input_name='ont_type'), ))
        if self.vform is not None and 'vform' not in already_processed:
            already_processed.add('vform')
            outfile.write(' vform=%s' % (self.gds_format_string(quote_attrib(self.vform).encode(ExternalEncoding), input_name='vform'), ))
        if self.voice is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            outfile.write(' voice=%s' % (self.gds_format_string(quote_attrib(self.voice).encode(ExternalEncoding), input_name='voice'), ))
        if self.class_ is not None and 'class_' not in already_processed:
            already_processed.add('class_')
            outfile.write(' class=%s' % (self.gds_format_string(quote_attrib(self.class_).encode(ExternalEncoding), input_name='class'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='EVENT', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='EVENT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.polarity is not None and 'polarity' not in already_processed:
            already_processed.add('polarity')
            showIndent(outfile, level)
            outfile.write('polarity="%s",\n' % (self.polarity,))
        if self.mood is not None and 'mood' not in already_processed:
            already_processed.add('mood')
            showIndent(outfile, level)
            outfile.write('mood="%s",\n' % (self.mood,))
        if self.modality is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            showIndent(outfile, level)
            outfile.write('modality="%s",\n' % (self.modality,))
        if self.pos is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            showIndent(outfile, level)
            outfile.write('pos="%s",\n' % (self.pos,))
        if self.stem is not None and 'stem' not in already_processed:
            already_processed.add('stem')
            showIndent(outfile, level)
            outfile.write('stem="%s",\n' % (self.stem,))
        if self.tense is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            showIndent(outfile, level)
            outfile.write('tense="%s",\n' % (self.tense,))
        if self.eid is not None and 'eid' not in already_processed:
            already_processed.add('eid')
            showIndent(outfile, level)
            outfile.write('eid="%s",\n' % (self.eid,))
        if self.aspect is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            showIndent(outfile, level)
            outfile.write('aspect="%s",\n' % (self.aspect,))
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            showIndent(outfile, level)
            outfile.write('sentID=%d,\n' % (self.sentID,))
        if self.ont_type is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            showIndent(outfile, level)
            outfile.write('ont_type="%s",\n' % (self.ont_type,))
        if self.vform is not None and 'vform' not in already_processed:
            already_processed.add('vform')
            showIndent(outfile, level)
            outfile.write('vform="%s",\n' % (self.vform,))
        if self.voice is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            showIndent(outfile, level)
            outfile.write('voice="%s",\n' % (self.voice,))
        if self.class_ is not None and 'class_' not in already_processed:
            already_processed.add('class_')
            showIndent(outfile, level)
            outfile.write('class_="%s",\n' % (self.class_,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('polarity', node)
        if value is not None and 'polarity' not in already_processed:
            already_processed.add('polarity')
            self.polarity = value
        value = find_attr_value_('mood', node)
        if value is not None and 'mood' not in already_processed:
            already_processed.add('mood')
            self.mood = value
        value = find_attr_value_('modality', node)
        if value is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            self.modality = value
        value = find_attr_value_('pos', node)
        if value is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            self.pos = value
        value = find_attr_value_('stem', node)
        if value is not None and 'stem' not in already_processed:
            already_processed.add('stem')
            self.stem = value
        value = find_attr_value_('tense', node)
        if value is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            self.tense = value
        value = find_attr_value_('eid', node)
        if value is not None and 'eid' not in already_processed:
            already_processed.add('eid')
            self.eid = value
            self.validate_EventID(self.eid)    # validate type EventID
        value = find_attr_value_('aspect', node)
        if value is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            self.aspect = value
        value = find_attr_value_('sentID', node)
        if value is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            try:
                self.sentID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('ont_type', node)
        if value is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            self.ont_type = value
        value = find_attr_value_('vform', node)
        if value is not None and 'vform' not in already_processed:
            already_processed.add('vform')
            self.vform = value
        value = find_attr_value_('voice', node)
        if value is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            self.voice = value
        value = find_attr_value_('class', node)
        if value is not None and 'class' not in already_processed:
            already_processed.add('class')
            self.class_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EVENT


class TIMEX3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, beginPoint=None, endPoint=None, functionInDocument='NONE', anchorTimeID=None, value=None, quant=None, valueFromFunction=None, sentID=None, tid=None, freq=None, type_=None, temporalFunction=False, mod=None, valueOf_=None):
        self.original_tagname_ = None
        self.beginPoint = _cast(None, beginPoint)
        self.endPoint = _cast(None, endPoint)
        self.functionInDocument = _cast(None, functionInDocument)
        self.anchorTimeID = _cast(None, anchorTimeID)
        self.value = _cast(None, value)
        self.quant = _cast(None, quant)
        self.valueFromFunction = _cast(None, valueFromFunction)
        self.sentID = _cast(int, sentID)
        self.tid = _cast(None, tid)
        self.freq = _cast(None, freq)
        self.type_ = _cast(None, type_)
        self.temporalFunction = _cast(bool, temporalFunction)
        self.mod = _cast(None, mod)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TIMEX3.subclass:
            return TIMEX3.subclass(*args_, **kwargs_)
        else:
            return TIMEX3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_beginPoint(self): return self.beginPoint
    def set_beginPoint(self, beginPoint): self.beginPoint = beginPoint
    def get_endPoint(self): return self.endPoint
    def set_endPoint(self, endPoint): self.endPoint = endPoint
    def get_functionInDocument(self): return self.functionInDocument
    def set_functionInDocument(self, functionInDocument): self.functionInDocument = functionInDocument
    def get_anchorTimeID(self): return self.anchorTimeID
    def set_anchorTimeID(self, anchorTimeID): self.anchorTimeID = anchorTimeID
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_quant(self): return self.quant
    def set_quant(self, quant): self.quant = quant
    def get_valueFromFunction(self): return self.valueFromFunction
    def set_valueFromFunction(self, valueFromFunction): self.valueFromFunction = valueFromFunction
    def get_sentID(self): return self.sentID
    def set_sentID(self, sentID): self.sentID = sentID
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_freq(self): return self.freq
    def set_freq(self, freq): self.freq = freq
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_temporalFunction(self): return self.temporalFunction
    def set_temporalFunction(self, temporalFunction): self.temporalFunction = temporalFunction
    def get_mod(self): return self.mod
    def set_mod(self, mod): self.mod = mod
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_TimeID(self, value):
        # Validate type TimeID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TimeID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TimeID_patterns_, ))
    validate_TimeID_patterns_ = [['^t\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TIMEX3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TIMEX3')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TIMEX3', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TIMEX3'):
        if self.beginPoint is not None and 'beginPoint' not in already_processed:
            already_processed.add('beginPoint')
            outfile.write(' beginPoint=%s' % (quote_attrib(self.beginPoint), ))
        if self.endPoint is not None and 'endPoint' not in already_processed:
            already_processed.add('endPoint')
            outfile.write(' endPoint=%s' % (quote_attrib(self.endPoint), ))
        if self.functionInDocument != "NONE" and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            outfile.write(' functionInDocument=%s' % (self.gds_format_string(quote_attrib(self.functionInDocument).encode(ExternalEncoding), input_name='functionInDocument'), ))
        if self.anchorTimeID is not None and 'anchorTimeID' not in already_processed:
            already_processed.add('anchorTimeID')
            outfile.write(' anchorTimeID=%s' % (quote_attrib(self.anchorTimeID), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.quant is not None and 'quant' not in already_processed:
            already_processed.add('quant')
            outfile.write(' quant=%s' % (self.gds_format_string(quote_attrib(self.quant).encode(ExternalEncoding), input_name='quant'), ))
        if self.valueFromFunction is not None and 'valueFromFunction' not in already_processed:
            already_processed.add('valueFromFunction')
            outfile.write(' valueFromFunction=%s' % (self.gds_format_string(quote_attrib(self.valueFromFunction).encode(ExternalEncoding), input_name='valueFromFunction'), ))
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            outfile.write(' sentID="%s"' % self.gds_format_integer(self.sentID, input_name='sentID'))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.add('tid')
            outfile.write(' tid=%s' % (quote_attrib(self.tid), ))
        if self.freq is not None and 'freq' not in already_processed:
            already_processed.add('freq')
            outfile.write(' freq=%s' % (self.gds_format_string(quote_attrib(self.freq).encode(ExternalEncoding), input_name='freq'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.temporalFunction and 'temporalFunction' not in already_processed:
            already_processed.add('temporalFunction')
            outfile.write(' temporalFunction="%s"' % self.gds_format_boolean(self.temporalFunction, input_name='temporalFunction'))
        if self.mod is not None and 'mod' not in already_processed:
            already_processed.add('mod')
            outfile.write(' mod=%s' % (self.gds_format_string(quote_attrib(self.mod).encode(ExternalEncoding), input_name='mod'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TIMEX3', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='TIMEX3'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.beginPoint is not None and 'beginPoint' not in already_processed:
            already_processed.add('beginPoint')
            showIndent(outfile, level)
            outfile.write('beginPoint="%s",\n' % (self.beginPoint,))
        if self.endPoint is not None and 'endPoint' not in already_processed:
            already_processed.add('endPoint')
            showIndent(outfile, level)
            outfile.write('endPoint="%s",\n' % (self.endPoint,))
        if self.functionInDocument is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            showIndent(outfile, level)
            outfile.write('functionInDocument="%s",\n' % (self.functionInDocument,))
        if self.anchorTimeID is not None and 'anchorTimeID' not in already_processed:
            already_processed.add('anchorTimeID')
            showIndent(outfile, level)
            outfile.write('anchorTimeID="%s",\n' % (self.anchorTimeID,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
        if self.quant is not None and 'quant' not in already_processed:
            already_processed.add('quant')
            showIndent(outfile, level)
            outfile.write('quant="%s",\n' % (self.quant,))
        if self.valueFromFunction is not None and 'valueFromFunction' not in already_processed:
            already_processed.add('valueFromFunction')
            showIndent(outfile, level)
            outfile.write('valueFromFunction="%s",\n' % (self.valueFromFunction,))
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            showIndent(outfile, level)
            outfile.write('sentID=%d,\n' % (self.sentID,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.add('tid')
            showIndent(outfile, level)
            outfile.write('tid="%s",\n' % (self.tid,))
        if self.freq is not None and 'freq' not in already_processed:
            already_processed.add('freq')
            showIndent(outfile, level)
            outfile.write('freq="%s",\n' % (self.freq,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.temporalFunction is not None and 'temporalFunction' not in already_processed:
            already_processed.add('temporalFunction')
            showIndent(outfile, level)
            outfile.write('temporalFunction=%s,\n' % (self.temporalFunction,))
        if self.mod is not None and 'mod' not in already_processed:
            already_processed.add('mod')
            showIndent(outfile, level)
            outfile.write('mod="%s",\n' % (self.mod,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('beginPoint', node)
        if value is not None and 'beginPoint' not in already_processed:
            already_processed.add('beginPoint')
            self.beginPoint = value
            self.validate_TimeID(self.beginPoint)    # validate type TimeID
        value = find_attr_value_('endPoint', node)
        if value is not None and 'endPoint' not in already_processed:
            already_processed.add('endPoint')
            self.endPoint = value
            self.validate_TimeID(self.endPoint)    # validate type TimeID
        value = find_attr_value_('functionInDocument', node)
        if value is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            self.functionInDocument = value
        value = find_attr_value_('anchorTimeID', node)
        if value is not None and 'anchorTimeID' not in already_processed:
            already_processed.add('anchorTimeID')
            self.anchorTimeID = value
            self.validate_TimeID(self.anchorTimeID)    # validate type TimeID
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('quant', node)
        if value is not None and 'quant' not in already_processed:
            already_processed.add('quant')
            self.quant = value
        value = find_attr_value_('valueFromFunction', node)
        if value is not None and 'valueFromFunction' not in already_processed:
            already_processed.add('valueFromFunction')
            self.valueFromFunction = value
        value = find_attr_value_('sentID', node)
        if value is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            try:
                self.sentID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.add('tid')
            self.tid = value
            self.validate_TimeID(self.tid)    # validate type TimeID
        value = find_attr_value_('freq', node)
        if value is not None and 'freq' not in already_processed:
            already_processed.add('freq')
            self.freq = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('temporalFunction', node)
        if value is not None and 'temporalFunction' not in already_processed:
            already_processed.add('temporalFunction')
            if value in ('true', '1'):
                self.temporalFunction = True
            elif value in ('false', '0'):
                self.temporalFunction = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('mod', node)
        if value is not None and 'mod' not in already_processed:
            already_processed.add('mod')
            self.mod = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TIMEX3


class SIGNAL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sentID=None, sid=None, valueOf_=None):
        self.original_tagname_ = None
        self.sentID = _cast(int, sentID)
        self.sid = _cast(None, sid)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SIGNAL.subclass:
            return SIGNAL.subclass(*args_, **kwargs_)
        else:
            return SIGNAL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sentID(self): return self.sentID
    def set_sentID(self, sentID): self.sentID = sentID
    def get_sid(self): return self.sid
    def set_sid(self, sid): self.sid = sid
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_SignalID(self, value):
        # Validate type SignalID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SignalID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SignalID_patterns_, ))
    validate_SignalID_patterns_ = [['^s\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SIGNAL', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SIGNAL')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SIGNAL', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SIGNAL'):
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            outfile.write(' sentID="%s"' % self.gds_format_integer(self.sentID, input_name='sentID'))
        if self.sid is not None and 'sid' not in already_processed:
            already_processed.add('sid')
            outfile.write(' sid=%s' % (quote_attrib(self.sid), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SIGNAL', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SIGNAL'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.sentID is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            showIndent(outfile, level)
            outfile.write('sentID=%d,\n' % (self.sentID,))
        if self.sid is not None and 'sid' not in already_processed:
            already_processed.add('sid')
            showIndent(outfile, level)
            outfile.write('sid="%s",\n' % (self.sid,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('sentID', node)
        if value is not None and 'sentID' not in already_processed:
            already_processed.add('sentID')
            try:
                self.sentID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('sid', node)
        if value is not None and 'sid' not in already_processed:
            already_processed.add('sid')
            self.sid = value
            self.validate_SignalID(self.sid)    # validate type SignalID
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SIGNAL


class MAKEINSTANCE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, eventID=None, polarity='POS', voice=None, signalID=None, pos=None, eiid=None, tense=None, aspect=None, ont_type=None, cardinality=None, modality=None):
        self.original_tagname_ = None
        self.eventID = _cast(None, eventID)
        self.polarity = _cast(None, polarity)
        self.voice = _cast(None, voice)
        self.signalID = _cast(None, signalID)
        self.pos = _cast(None, pos)
        self.eiid = _cast(None, eiid)
        self.tense = _cast(None, tense)
        self.aspect = _cast(None, aspect)
        self.ont_type = _cast(None, ont_type)
        self.cardinality = _cast(None, cardinality)
        self.modality = _cast(None, modality)
    def factory(*args_, **kwargs_):
        if MAKEINSTANCE.subclass:
            return MAKEINSTANCE.subclass(*args_, **kwargs_)
        else:
            return MAKEINSTANCE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_eventID(self): return self.eventID
    def set_eventID(self, eventID): self.eventID = eventID
    def get_polarity(self): return self.polarity
    def set_polarity(self, polarity): self.polarity = polarity
    def get_voice(self): return self.voice
    def set_voice(self, voice): self.voice = voice
    def get_signalID(self): return self.signalID
    def set_signalID(self, signalID): self.signalID = signalID
    def get_pos(self): return self.pos
    def set_pos(self, pos): self.pos = pos
    def get_eiid(self): return self.eiid
    def set_eiid(self, eiid): self.eiid = eiid
    def get_tense(self): return self.tense
    def set_tense(self, tense): self.tense = tense
    def get_aspect(self): return self.aspect
    def set_aspect(self, aspect): self.aspect = aspect
    def get_ont_type(self): return self.ont_type
    def set_ont_type(self, ont_type): self.ont_type = ont_type
    def get_cardinality(self): return self.cardinality
    def set_cardinality(self, cardinality): self.cardinality = cardinality
    def get_modality(self): return self.modality
    def set_modality(self, modality): self.modality = modality
    def validate_EventID(self, value):
        # Validate type EventID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventID_patterns_, ))
    validate_EventID_patterns_ = [['^e\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_SignalID(self, value):
        # Validate type SignalID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SignalID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SignalID_patterns_, ))
    validate_SignalID_patterns_ = [['^s\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_EventInstanceID(self, value):
        # Validate type EventInstanceID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventInstanceID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventInstanceID_patterns_, ))
    validate_EventInstanceID_patterns_ = [['^ei\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MAKEINSTANCE', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MAKEINSTANCE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MAKEINSTANCE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MAKEINSTANCE'):
        if self.eventID is not None and 'eventID' not in already_processed:
            already_processed.add('eventID')
            outfile.write(' eventID=%s' % (quote_attrib(self.eventID), ))
        if self.polarity != "POS" and 'polarity' not in already_processed:
            already_processed.add('polarity')
            outfile.write(' polarity=%s' % (self.gds_format_string(quote_attrib(self.polarity).encode(ExternalEncoding), input_name='polarity'), ))
        if self.voice is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            outfile.write(' voice=%s' % (self.gds_format_string(quote_attrib(self.voice).encode(ExternalEncoding), input_name='voice'), ))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            outfile.write(' signalID=%s' % (quote_attrib(self.signalID), ))
        if self.pos is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            outfile.write(' pos=%s' % (self.gds_format_string(quote_attrib(self.pos).encode(ExternalEncoding), input_name='pos'), ))
        if self.eiid is not None and 'eiid' not in already_processed:
            already_processed.add('eiid')
            outfile.write(' eiid=%s' % (quote_attrib(self.eiid), ))
        if self.tense is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            outfile.write(' tense=%s' % (self.gds_format_string(quote_attrib(self.tense).encode(ExternalEncoding), input_name='tense'), ))
        if self.aspect is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            outfile.write(' aspect=%s' % (self.gds_format_string(quote_attrib(self.aspect).encode(ExternalEncoding), input_name='aspect'), ))
        if self.ont_type is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            outfile.write(' ont_type=%s' % (self.gds_format_string(quote_attrib(self.ont_type).encode(ExternalEncoding), input_name='ont_type'), ))
        if self.cardinality is not None and 'cardinality' not in already_processed:
            already_processed.add('cardinality')
            outfile.write(' cardinality=%s' % (self.gds_format_string(quote_attrib(self.cardinality).encode(ExternalEncoding), input_name='cardinality'), ))
        if self.modality is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            outfile.write(' modality=%s' % (self.gds_format_string(quote_attrib(self.modality).encode(ExternalEncoding), input_name='modality'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MAKEINSTANCE', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='MAKEINSTANCE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.eventID is not None and 'eventID' not in already_processed:
            already_processed.add('eventID')
            showIndent(outfile, level)
            outfile.write('eventID="%s",\n' % (self.eventID,))
        if self.polarity is not None and 'polarity' not in already_processed:
            already_processed.add('polarity')
            showIndent(outfile, level)
            outfile.write('polarity="%s",\n' % (self.polarity,))
        if self.voice is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            showIndent(outfile, level)
            outfile.write('voice="%s",\n' % (self.voice,))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            showIndent(outfile, level)
            outfile.write('signalID="%s",\n' % (self.signalID,))
        if self.pos is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            showIndent(outfile, level)
            outfile.write('pos="%s",\n' % (self.pos,))
        if self.eiid is not None and 'eiid' not in already_processed:
            already_processed.add('eiid')
            showIndent(outfile, level)
            outfile.write('eiid="%s",\n' % (self.eiid,))
        if self.tense is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            showIndent(outfile, level)
            outfile.write('tense="%s",\n' % (self.tense,))
        if self.aspect is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            showIndent(outfile, level)
            outfile.write('aspect="%s",\n' % (self.aspect,))
        if self.ont_type is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            showIndent(outfile, level)
            outfile.write('ont_type="%s",\n' % (self.ont_type,))
        if self.cardinality is not None and 'cardinality' not in already_processed:
            already_processed.add('cardinality')
            showIndent(outfile, level)
            outfile.write('cardinality="%s",\n' % (self.cardinality,))
        if self.modality is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            showIndent(outfile, level)
            outfile.write('modality="%s",\n' % (self.modality,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('eventID', node)
        if value is not None and 'eventID' not in already_processed:
            already_processed.add('eventID')
            self.eventID = value
            self.validate_EventID(self.eventID)    # validate type EventID
        value = find_attr_value_('polarity', node)
        if value is not None and 'polarity' not in already_processed:
            already_processed.add('polarity')
            self.polarity = value
        value = find_attr_value_('voice', node)
        if value is not None and 'voice' not in already_processed:
            already_processed.add('voice')
            self.voice = value
        value = find_attr_value_('signalID', node)
        if value is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            self.signalID = value
            self.validate_SignalID(self.signalID)    # validate type SignalID
        value = find_attr_value_('pos', node)
        if value is not None and 'pos' not in already_processed:
            already_processed.add('pos')
            self.pos = value
        value = find_attr_value_('eiid', node)
        if value is not None and 'eiid' not in already_processed:
            already_processed.add('eiid')
            self.eiid = value
            self.validate_EventInstanceID(self.eiid)    # validate type EventInstanceID
        value = find_attr_value_('tense', node)
        if value is not None and 'tense' not in already_processed:
            already_processed.add('tense')
            self.tense = value
        value = find_attr_value_('aspect', node)
        if value is not None and 'aspect' not in already_processed:
            already_processed.add('aspect')
            self.aspect = value
        value = find_attr_value_('ont_type', node)
        if value is not None and 'ont_type' not in already_processed:
            already_processed.add('ont_type')
            self.ont_type = value
        value = find_attr_value_('cardinality', node)
        if value is not None and 'cardinality' not in already_processed:
            already_processed.add('cardinality')
            self.cardinality = value
        value = find_attr_value_('modality', node)
        if value is not None and 'modality' not in already_processed:
            already_processed.add('modality')
            self.modality = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MAKEINSTANCE


class TLINK(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lid=None, origin=None, changed=None, relatedToEventInstance=None, relType=None, signalID=None, timeID=None, magnitude=None, eventInstanceID=None, relatedToTime=None):
        self.original_tagname_ = None
        self.lid = _cast(None, lid)
        self.origin = _cast(None, origin)
        self.changed = _cast(None, changed)
        self.relatedToEventInstance = _cast(None, relatedToEventInstance)
        self.relType = _cast(None, relType)
        self.signalID = _cast(None, signalID)
        self.timeID = _cast(None, timeID)
        self.magnitude = _cast(None, magnitude)
        self.eventInstanceID = _cast(None, eventInstanceID)
        self.relatedToTime = _cast(None, relatedToTime)
    def factory(*args_, **kwargs_):
        if TLINK.subclass:
            return TLINK.subclass(*args_, **kwargs_)
        else:
            return TLINK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lid(self): return self.lid
    def set_lid(self, lid): self.lid = lid
    def get_origin(self): return self.origin
    def set_origin(self, origin): self.origin = origin
    def get_changed(self): return self.changed
    def set_changed(self, changed): self.changed = changed
    def get_relatedToEventInstance(self): return self.relatedToEventInstance
    def set_relatedToEventInstance(self, relatedToEventInstance): self.relatedToEventInstance = relatedToEventInstance
    def get_relType(self): return self.relType
    def set_relType(self, relType): self.relType = relType
    def get_signalID(self): return self.signalID
    def set_signalID(self, signalID): self.signalID = signalID
    def get_timeID(self): return self.timeID
    def set_timeID(self, timeID): self.timeID = timeID
    def get_magnitude(self): return self.magnitude
    def set_magnitude(self, magnitude): self.magnitude = magnitude
    def get_eventInstanceID(self): return self.eventInstanceID
    def set_eventInstanceID(self, eventInstanceID): self.eventInstanceID = eventInstanceID
    def get_relatedToTime(self): return self.relatedToTime
    def set_relatedToTime(self, relatedToTime): self.relatedToTime = relatedToTime
    def validate_LinkID(self, value):
        # Validate type LinkID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_LinkID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_LinkID_patterns_, ))
    validate_LinkID_patterns_ = [['^l\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_EventInstanceID(self, value):
        # Validate type EventInstanceID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventInstanceID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventInstanceID_patterns_, ))
    validate_EventInstanceID_patterns_ = [['^ei\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_SignalID(self, value):
        # Validate type SignalID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SignalID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SignalID_patterns_, ))
    validate_SignalID_patterns_ = [['^s\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_TimeID(self, value):
        # Validate type TimeID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TimeID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TimeID_patterns_, ))
    validate_TimeID_patterns_ = [['^t\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TLINK', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TLINK')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TLINK', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TLINK'):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            outfile.write(' lid=%s' % (quote_attrib(self.lid), ))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            outfile.write(' origin=%s' % (self.gds_format_string(quote_attrib(self.origin).encode(ExternalEncoding), input_name='origin'), ))
        if self.changed is not None and 'changed' not in already_processed:
            already_processed.add('changed')
            outfile.write(' changed=%s' % (self.gds_format_string(quote_attrib(self.changed).encode(ExternalEncoding), input_name='changed'), ))
        if self.relatedToEventInstance is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            outfile.write(' relatedToEventInstance=%s' % (quote_attrib(self.relatedToEventInstance), ))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            outfile.write(' relType=%s' % (self.gds_format_string(quote_attrib(self.relType).encode(ExternalEncoding), input_name='relType'), ))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            outfile.write(' signalID=%s' % (quote_attrib(self.signalID), ))
        if self.timeID is not None and 'timeID' not in already_processed:
            already_processed.add('timeID')
            outfile.write(' timeID=%s' % (quote_attrib(self.timeID), ))
        if self.magnitude is not None and 'magnitude' not in already_processed:
            already_processed.add('magnitude')
            outfile.write(' magnitude=%s' % (quote_attrib(self.magnitude), ))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            outfile.write(' eventInstanceID=%s' % (quote_attrib(self.eventInstanceID), ))
        if self.relatedToTime is not None and 'relatedToTime' not in already_processed:
            already_processed.add('relatedToTime')
            outfile.write(' relatedToTime=%s' % (quote_attrib(self.relatedToTime), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TLINK', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='TLINK'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            showIndent(outfile, level)
            outfile.write('lid="%s",\n' % (self.lid,))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            showIndent(outfile, level)
            outfile.write('origin="%s",\n' % (self.origin,))
        if self.changed is not None and 'changed' not in already_processed:
            already_processed.add('changed')
            showIndent(outfile, level)
            outfile.write('changed="%s",\n' % (self.changed,))
        if self.relatedToEventInstance is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            showIndent(outfile, level)
            outfile.write('relatedToEventInstance="%s",\n' % (self.relatedToEventInstance,))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            showIndent(outfile, level)
            outfile.write('relType="%s",\n' % (self.relType,))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            showIndent(outfile, level)
            outfile.write('signalID="%s",\n' % (self.signalID,))
        if self.timeID is not None and 'timeID' not in already_processed:
            already_processed.add('timeID')
            showIndent(outfile, level)
            outfile.write('timeID="%s",\n' % (self.timeID,))
        if self.magnitude is not None and 'magnitude' not in already_processed:
            already_processed.add('magnitude')
            showIndent(outfile, level)
            outfile.write('magnitude="%s",\n' % (self.magnitude,))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            showIndent(outfile, level)
            outfile.write('eventInstanceID="%s",\n' % (self.eventInstanceID,))
        if self.relatedToTime is not None and 'relatedToTime' not in already_processed:
            already_processed.add('relatedToTime')
            showIndent(outfile, level)
            outfile.write('relatedToTime="%s",\n' % (self.relatedToTime,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lid', node)
        if value is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            self.lid = value
            self.validate_LinkID(self.lid)    # validate type LinkID
        value = find_attr_value_('origin', node)
        if value is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            self.origin = value
        value = find_attr_value_('changed', node)
        if value is not None and 'changed' not in already_processed:
            already_processed.add('changed')
            self.changed = value
        value = find_attr_value_('relatedToEventInstance', node)
        if value is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            self.relatedToEventInstance = value
            self.validate_EventInstanceID(self.relatedToEventInstance)    # validate type EventInstanceID
        value = find_attr_value_('relType', node)
        if value is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            self.relType = value
        value = find_attr_value_('signalID', node)
        if value is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            self.signalID = value
            self.validate_SignalID(self.signalID)    # validate type SignalID
        value = find_attr_value_('timeID', node)
        if value is not None and 'timeID' not in already_processed:
            already_processed.add('timeID')
            self.timeID = value
            self.validate_TimeID(self.timeID)    # validate type TimeID
        value = find_attr_value_('magnitude', node)
        if value is not None and 'magnitude' not in already_processed:
            already_processed.add('magnitude')
            self.magnitude = value
            self.validate_TimeID(self.magnitude)    # validate type TimeID
        value = find_attr_value_('eventInstanceID', node)
        if value is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            self.eventInstanceID = value
            self.validate_EventInstanceID(self.eventInstanceID)    # validate type EventInstanceID
        value = find_attr_value_('relatedToTime', node)
        if value is not None and 'relatedToTime' not in already_processed:
            already_processed.add('relatedToTime')
            self.relatedToTime = value
            self.validate_TimeID(self.relatedToTime)    # validate type TimeID
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TLINK


class SLINK(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lid=None, origin=None, relType=None, signalID=None, syntax=None, eventInstanceID=None, subordinatedEventInstance=None):
        self.original_tagname_ = None
        self.lid = _cast(None, lid)
        self.origin = _cast(None, origin)
        self.relType = _cast(None, relType)
        self.signalID = _cast(None, signalID)
        self.syntax = _cast(None, syntax)
        self.eventInstanceID = _cast(None, eventInstanceID)
        self.subordinatedEventInstance = _cast(None, subordinatedEventInstance)
    def factory(*args_, **kwargs_):
        if SLINK.subclass:
            return SLINK.subclass(*args_, **kwargs_)
        else:
            return SLINK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lid(self): return self.lid
    def set_lid(self, lid): self.lid = lid
    def get_origin(self): return self.origin
    def set_origin(self, origin): self.origin = origin
    def get_relType(self): return self.relType
    def set_relType(self, relType): self.relType = relType
    def get_signalID(self): return self.signalID
    def set_signalID(self, signalID): self.signalID = signalID
    def get_syntax(self): return self.syntax
    def set_syntax(self, syntax): self.syntax = syntax
    def get_eventInstanceID(self): return self.eventInstanceID
    def set_eventInstanceID(self, eventInstanceID): self.eventInstanceID = eventInstanceID
    def get_subordinatedEventInstance(self): return self.subordinatedEventInstance
    def set_subordinatedEventInstance(self, subordinatedEventInstance): self.subordinatedEventInstance = subordinatedEventInstance
    def validate_LinkID(self, value):
        # Validate type LinkID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_LinkID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_LinkID_patterns_, ))
    validate_LinkID_patterns_ = [['^l\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_SignalID(self, value):
        # Validate type SignalID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SignalID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SignalID_patterns_, ))
    validate_SignalID_patterns_ = [['^s\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_EventInstanceID(self, value):
        # Validate type EventInstanceID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventInstanceID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventInstanceID_patterns_, ))
    validate_EventInstanceID_patterns_ = [['^ei\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SLINK', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SLINK')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SLINK', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SLINK'):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            outfile.write(' lid=%s' % (quote_attrib(self.lid), ))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            outfile.write(' origin=%s' % (self.gds_format_string(quote_attrib(self.origin).encode(ExternalEncoding), input_name='origin'), ))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            outfile.write(' relType=%s' % (self.gds_format_string(quote_attrib(self.relType).encode(ExternalEncoding), input_name='relType'), ))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            outfile.write(' signalID=%s' % (quote_attrib(self.signalID), ))
        if self.syntax is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            outfile.write(' syntax=%s' % (self.gds_format_string(quote_attrib(self.syntax).encode(ExternalEncoding), input_name='syntax'), ))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            outfile.write(' eventInstanceID=%s' % (quote_attrib(self.eventInstanceID), ))
        if self.subordinatedEventInstance is not None and 'subordinatedEventInstance' not in already_processed:
            already_processed.add('subordinatedEventInstance')
            outfile.write(' subordinatedEventInstance=%s' % (quote_attrib(self.subordinatedEventInstance), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SLINK', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SLINK'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            showIndent(outfile, level)
            outfile.write('lid="%s",\n' % (self.lid,))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            showIndent(outfile, level)
            outfile.write('origin="%s",\n' % (self.origin,))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            showIndent(outfile, level)
            outfile.write('relType="%s",\n' % (self.relType,))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            showIndent(outfile, level)
            outfile.write('signalID="%s",\n' % (self.signalID,))
        if self.syntax is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            showIndent(outfile, level)
            outfile.write('syntax="%s",\n' % (self.syntax,))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            showIndent(outfile, level)
            outfile.write('eventInstanceID="%s",\n' % (self.eventInstanceID,))
        if self.subordinatedEventInstance is not None and 'subordinatedEventInstance' not in already_processed:
            already_processed.add('subordinatedEventInstance')
            showIndent(outfile, level)
            outfile.write('subordinatedEventInstance="%s",\n' % (self.subordinatedEventInstance,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lid', node)
        if value is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            self.lid = value
            self.validate_LinkID(self.lid)    # validate type LinkID
        value = find_attr_value_('origin', node)
        if value is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            self.origin = value
        value = find_attr_value_('relType', node)
        if value is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            self.relType = value
        value = find_attr_value_('signalID', node)
        if value is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            self.signalID = value
            self.validate_SignalID(self.signalID)    # validate type SignalID
        value = find_attr_value_('syntax', node)
        if value is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            self.syntax = value
        value = find_attr_value_('eventInstanceID', node)
        if value is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            self.eventInstanceID = value
            self.validate_EventInstanceID(self.eventInstanceID)    # validate type EventInstanceID
        value = find_attr_value_('subordinatedEventInstance', node)
        if value is not None and 'subordinatedEventInstance' not in already_processed:
            already_processed.add('subordinatedEventInstance')
            self.subordinatedEventInstance = value
            self.validate_EventInstanceID(self.subordinatedEventInstance)    # validate type EventInstanceID
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SLINK


class ALINK(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, lid=None, origin=None, relatedToEventInstance=None, relType=None, signalID=None, syntax=None, eventInstanceID=None):
        self.original_tagname_ = None
        self.lid = _cast(None, lid)
        self.origin = _cast(None, origin)
        self.relatedToEventInstance = _cast(None, relatedToEventInstance)
        self.relType = _cast(None, relType)
        self.signalID = _cast(None, signalID)
        self.syntax = _cast(None, syntax)
        self.eventInstanceID = _cast(None, eventInstanceID)
    def factory(*args_, **kwargs_):
        if ALINK.subclass:
            return ALINK.subclass(*args_, **kwargs_)
        else:
            return ALINK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lid(self): return self.lid
    def set_lid(self, lid): self.lid = lid
    def get_origin(self): return self.origin
    def set_origin(self, origin): self.origin = origin
    def get_relatedToEventInstance(self): return self.relatedToEventInstance
    def set_relatedToEventInstance(self, relatedToEventInstance): self.relatedToEventInstance = relatedToEventInstance
    def get_relType(self): return self.relType
    def set_relType(self, relType): self.relType = relType
    def get_signalID(self): return self.signalID
    def set_signalID(self, signalID): self.signalID = signalID
    def get_syntax(self): return self.syntax
    def set_syntax(self, syntax): self.syntax = syntax
    def get_eventInstanceID(self): return self.eventInstanceID
    def set_eventInstanceID(self, eventInstanceID): self.eventInstanceID = eventInstanceID
    def validate_LinkID(self, value):
        # Validate type LinkID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_LinkID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_LinkID_patterns_, ))
    validate_LinkID_patterns_ = [['^l\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_EventInstanceID(self, value):
        # Validate type EventInstanceID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_EventInstanceID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_EventInstanceID_patterns_, ))
    validate_EventInstanceID_patterns_ = [['^ei\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def validate_SignalID(self, value):
        # Validate type SignalID, a restriction on TimeMLID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SignalID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SignalID_patterns_, ))
    validate_SignalID_patterns_ = [['^s\\p{Nd}+$'], ['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ALINK', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ALINK')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ALINK', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ALINK'):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            outfile.write(' lid=%s' % (quote_attrib(self.lid), ))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            outfile.write(' origin=%s' % (self.gds_format_string(quote_attrib(self.origin).encode(ExternalEncoding), input_name='origin'), ))
        if self.relatedToEventInstance is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            outfile.write(' relatedToEventInstance=%s' % (quote_attrib(self.relatedToEventInstance), ))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            outfile.write(' relType=%s' % (self.gds_format_string(quote_attrib(self.relType).encode(ExternalEncoding), input_name='relType'), ))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            outfile.write(' signalID=%s' % (quote_attrib(self.signalID), ))
        if self.syntax is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            outfile.write(' syntax=%s' % (self.gds_format_string(quote_attrib(self.syntax).encode(ExternalEncoding), input_name='syntax'), ))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            outfile.write(' eventInstanceID=%s' % (quote_attrib(self.eventInstanceID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ALINK', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ALINK'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lid is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            showIndent(outfile, level)
            outfile.write('lid="%s",\n' % (self.lid,))
        if self.origin is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            showIndent(outfile, level)
            outfile.write('origin="%s",\n' % (self.origin,))
        if self.relatedToEventInstance is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            showIndent(outfile, level)
            outfile.write('relatedToEventInstance="%s",\n' % (self.relatedToEventInstance,))
        if self.relType is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            showIndent(outfile, level)
            outfile.write('relType="%s",\n' % (self.relType,))
        if self.signalID is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            showIndent(outfile, level)
            outfile.write('signalID="%s",\n' % (self.signalID,))
        if self.syntax is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            showIndent(outfile, level)
            outfile.write('syntax="%s",\n' % (self.syntax,))
        if self.eventInstanceID is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            showIndent(outfile, level)
            outfile.write('eventInstanceID="%s",\n' % (self.eventInstanceID,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lid', node)
        if value is not None and 'lid' not in already_processed:
            already_processed.add('lid')
            self.lid = value
            self.validate_LinkID(self.lid)    # validate type LinkID
        value = find_attr_value_('origin', node)
        if value is not None and 'origin' not in already_processed:
            already_processed.add('origin')
            self.origin = value
        value = find_attr_value_('relatedToEventInstance', node)
        if value is not None and 'relatedToEventInstance' not in already_processed:
            already_processed.add('relatedToEventInstance')
            self.relatedToEventInstance = value
            self.validate_EventInstanceID(self.relatedToEventInstance)    # validate type EventInstanceID
        value = find_attr_value_('relType', node)
        if value is not None and 'relType' not in already_processed:
            already_processed.add('relType')
            self.relType = value
        value = find_attr_value_('signalID', node)
        if value is not None and 'signalID' not in already_processed:
            already_processed.add('signalID')
            self.signalID = value
            self.validate_SignalID(self.signalID)    # validate type SignalID
        value = find_attr_value_('syntax', node)
        if value is not None and 'syntax' not in already_processed:
            already_processed.add('syntax')
            self.syntax = value
        value = find_attr_value_('eventInstanceID', node)
        if value is not None and 'eventInstanceID' not in already_processed:
            already_processed.add('eventInstanceID')
            self.eventInstanceID = value
            self.validate_EventInstanceID(self.eventInstanceID)    # validate type EventInstanceID
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ALINK


class CONFIDENCE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, confidenceValue=None, tagID=None, attributeName=None, tagType=None):
        self.original_tagname_ = None
        self.confidenceValue = _cast(None, confidenceValue)
        self.tagID = _cast(None, tagID)
        self.attributeName = _cast(None, attributeName)
        self.tagType = _cast(None, tagType)
    def factory(*args_, **kwargs_):
        if CONFIDENCE.subclass:
            return CONFIDENCE.subclass(*args_, **kwargs_)
        else:
            return CONFIDENCE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_confidenceValue(self): return self.confidenceValue
    def set_confidenceValue(self, confidenceValue): self.confidenceValue = confidenceValue
    def get_tagID(self): return self.tagID
    def set_tagID(self, tagID): self.tagID = tagID
    def get_attributeName(self): return self.attributeName
    def set_attributeName(self, attributeName): self.attributeName = attributeName
    def get_tagType(self): return self.tagType
    def set_tagType(self, tagType): self.tagType = tagType
    def validate_Probability(self, value):
        # Validate type Probability, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on Probability' % {"value" : value} )
            if value > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on Probability' % {"value" : value} )
    def validate_TimeMLID(self, value):
        # Validate type TimeMLID, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TimeMLID_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TimeMLID_patterns_, ))
    validate_TimeMLID_patterns_ = [['^[a-z]+\\p{Nd}+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CONFIDENCE', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CONFIDENCE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CONFIDENCE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CONFIDENCE'):
        if self.confidenceValue is not None and 'confidenceValue' not in already_processed:
            already_processed.add('confidenceValue')
            outfile.write(' confidenceValue=%s' % (quote_attrib(self.confidenceValue), ))
        if self.tagID is not None and 'tagID' not in already_processed:
            already_processed.add('tagID')
            outfile.write(' tagID=%s' % (quote_attrib(self.tagID), ))
        if self.attributeName is not None and 'attributeName' not in already_processed:
            already_processed.add('attributeName')
            outfile.write(' attributeName=%s' % (self.gds_format_string(quote_attrib(self.attributeName).encode(ExternalEncoding), input_name='attributeName'), ))
        if self.tagType is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            outfile.write(' tagType=%s' % (self.gds_format_string(quote_attrib(self.tagType).encode(ExternalEncoding), input_name='tagType'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CONFIDENCE', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='CONFIDENCE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.confidenceValue is not None and 'confidenceValue' not in already_processed:
            already_processed.add('confidenceValue')
            showIndent(outfile, level)
            outfile.write('confidenceValue=%f,\n' % (self.confidenceValue,))
        if self.tagID is not None and 'tagID' not in already_processed:
            already_processed.add('tagID')
            showIndent(outfile, level)
            outfile.write('tagID="%s",\n' % (self.tagID,))
        if self.attributeName is not None and 'attributeName' not in already_processed:
            already_processed.add('attributeName')
            showIndent(outfile, level)
            outfile.write('attributeName="%s",\n' % (self.attributeName,))
        if self.tagType is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            showIndent(outfile, level)
            outfile.write('tagType="%s",\n' % (self.tagType,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('confidenceValue', node)
        if value is not None and 'confidenceValue' not in already_processed:
            already_processed.add('confidenceValue')
            try:
                self.confidenceValue = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (confidenceValue): %s' % exp)
            self.validate_Probability(self.confidenceValue)    # validate type Probability
        value = find_attr_value_('tagID', node)
        if value is not None and 'tagID' not in already_processed:
            already_processed.add('tagID')
            self.tagID = value
            self.validate_TimeMLID(self.tagID)    # validate type TimeMLID
        value = find_attr_value_('attributeName', node)
        if value is not None and 'attributeName' not in already_processed:
            already_processed.add('attributeName')
            self.attributeName = value
        value = find_attr_value_('tagType', node)
        if value is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            self.tagType = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CONFIDENCE


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TimeML'
        rootClass = TimeML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TimeML'
        rootClass = TimeML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TimeML'
        rootClass = TimeML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TimeML'
        rootClass = TimeML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from timeml_parser import *\n\n')
        sys.stdout.write('import timeml_parser as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ALINK",
    "CONFIDENCE",
    "EVENT",
    "MAKEINSTANCE",
    "SIGNAL",
    "SLINK",
    "TIMEX3",
    "TLINK",
    "TimeML"
]
