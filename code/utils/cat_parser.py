#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jul 20 15:24:11 2015 by generateDS.py version 2.16a.
#
# Command line options:
#   ('-o', 'cat_parser.py')
#
# Command line arguments:
#   ../../data/CAT/cat_schema.xsd
#
# Command line:
#   ../../tools/generateDS-2.16a0/generateDS.py -o "cat_parser.py" ../../data/CAT/cat_schema.xsd
#
# Current working directory (os.getcwd()):
#   utils
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, doc_name=None, src_url=None, doc_id=None, token=None, Markables=None):
        self.original_tagname_ = None
        self.doc_name = _cast(None, doc_name)
        self.src_url = _cast(None, src_url)
        self.doc_id = _cast(int, doc_id)
        if token is None:
            self.token = []
        else:
            self.token = token
        self.Markables = Markables
    def factory(*args_, **kwargs_):
        if Document.subclass:
            return Document.subclass(*args_, **kwargs_)
        else:
            return Document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token(self): return self.token
    def set_token(self, token): self.token = token
    def add_token(self, value): self.token.append(value)
    def insert_token_at(self, index, value): self.token.insert(index, value)
    def replace_token_at(self, index, value): self.token[index] = value
    def get_Markables(self): return self.Markables
    def set_Markables(self, Markables): self.Markables = Markables
    def get_doc_name(self): return self.doc_name
    def set_doc_name(self, doc_name): self.doc_name = doc_name
    def get_src_url(self): return self.src_url
    def set_src_url(self, src_url): self.src_url = src_url
    def get_doc_id(self): return self.doc_id
    def set_doc_id(self, doc_id): self.doc_id = doc_id
    def hasContent_(self):
        if (
            self.token or
            self.Markables is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Document', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Document'):
        if self.doc_name is not None and 'doc_name' not in already_processed:
            already_processed.add('doc_name')
            outfile.write(' doc_name=%s' % (self.gds_format_string(quote_attrib(self.doc_name).encode(ExternalEncoding), input_name='doc_name'), ))
        if self.src_url is not None and 'src_url' not in already_processed:
            already_processed.add('src_url')
            outfile.write(' src_url=%s' % (self.gds_format_string(quote_attrib(self.src_url).encode(ExternalEncoding, 'ignore'), input_name='src_url'), ))
        if self.doc_id is not None and 'doc_id' not in already_processed:
            already_processed.add('doc_id')
            outfile.write(' doc_id="%s"' % self.gds_format_integer(self.doc_id, input_name='doc_id'))
    def exportChildren(self, outfile, level, namespace_='', name_='Document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for token_ in self.token:
            token_.export(outfile, level, namespace_, name_='token', pretty_print=pretty_print)
        if self.Markables is not None:
            self.Markables.export(outfile, level, namespace_, name_='Markables', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Document'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.doc_name is not None and 'doc_name' not in already_processed:
            already_processed.add('doc_name')
            showIndent(outfile, level)
            outfile.write('doc_name="%s",\n' % (self.doc_name,))
        if self.src_url is not None and 'src_url' not in already_processed:
            already_processed.add('src_url')
            showIndent(outfile, level)
            outfile.write('src_url="%s",\n' % (self.src_url,))
        if self.doc_id is not None and 'doc_id' not in already_processed:
            already_processed.add('doc_id')
            showIndent(outfile, level)
            outfile.write('doc_id=%d,\n' % (self.doc_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('token=[\n')
        level += 1
        for token_ in self.token:
            showIndent(outfile, level)
            outfile.write('model_.tokenType(\n')
            token_.exportLiteral(outfile, level, name_='tokenType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Markables is not None:
            showIndent(outfile, level)
            outfile.write('Markables=model_.MarkablesType(\n')
            self.Markables.exportLiteral(outfile, level, name_='Markables')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('doc_name', node)
        if value is not None and 'doc_name' not in already_processed:
            already_processed.add('doc_name')
            self.doc_name = value
        value = find_attr_value_('src_url', node)
        if value is not None and 'src_url' not in already_processed:
            already_processed.add('src_url')
            self.src_url = value
        value = find_attr_value_('doc_id', node)
        if value is not None and 'doc_id' not in already_processed:
            already_processed.add('doc_id')
            try:
                self.doc_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token':
            obj_ = tokenType.factory()
            obj_.build(child_)
            self.token.append(obj_)
            obj_.original_tagname_ = 'token'
        elif nodeName_ == 'Markables':
            obj_ = MarkablesType.factory()
            obj_.build(child_)
            self.Markables = obj_
            obj_.original_tagname_ = 'Markables'
# end class Document


class tokenType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, t_id=None, number=None, sentence=None, valueOf_=None):
        self.original_tagname_ = None
        self.t_id = _cast(int, t_id)
        self.number = _cast(int, number)
        self.sentence = _cast(int, sentence)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if tokenType.subclass:
            return tokenType.subclass(*args_, **kwargs_)
        else:
            return tokenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_t_id(self): return self.t_id
    def set_t_id(self, t_id): self.t_id = t_id
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_sentence(self): return self.sentence
    def set_sentence(self, sentence): self.sentence = sentence
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tokenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tokenType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_.encode(ExternalEncoding, 'ignore')) # str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tokenType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tokenType'):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            outfile.write(' t_id="%s"' % self.gds_format_integer(self.t_id, input_name='t_id'))
        if self.number is not None and 'number' not in already_processed:
            already_processed.add('number')
            outfile.write(' number="%s"' % self.gds_format_integer(self.number, input_name='number'))
        if self.sentence is not None and 'sentence' not in already_processed:
            already_processed.add('sentence')
            outfile.write(' sentence="%s"' % self.gds_format_integer(self.sentence, input_name='sentence'))
    def exportChildren(self, outfile, level, namespace_='', name_='tokenType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='tokenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            showIndent(outfile, level)
            outfile.write('t_id=%d,\n' % (self.t_id,))
        if self.number is not None and 'number' not in already_processed:
            already_processed.add('number')
            showIndent(outfile, level)
            outfile.write('number=%d,\n' % (self.number,))
        if self.sentence is not None and 'sentence' not in already_processed:
            already_processed.add('sentence')
            showIndent(outfile, level)
            outfile.write('sentence=%d,\n' % (self.sentence,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('t_id', node)
        if value is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            try:
                self.t_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('number', node)
        if value is not None and 'number' not in already_processed:
            already_processed.add('number')
            try:
                self.number = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('sentence', node)
        if value is not None and 'sentence' not in already_processed:
            already_processed.add('sentence')
            try:
                self.sentence = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tokenType


class MarkablesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EVENT_MENTION=None, TIMEX3=None, DCT=None, ENTITY_MENTION=None):
        self.original_tagname_ = None
        if EVENT_MENTION is None:
            self.EVENT_MENTION = []
        else:
            self.EVENT_MENTION = EVENT_MENTION
        if TIMEX3 is None:
            self.TIMEX3 = []
        else:
            self.TIMEX3 = TIMEX3
        self.DCT = DCT
        if ENTITY_MENTION is None:
            self.ENTITY_MENTION = []
        else:
            self.ENTITY_MENTION = ENTITY_MENTION
    def factory(*args_, **kwargs_):
        if MarkablesType.subclass:
            return MarkablesType.subclass(*args_, **kwargs_)
        else:
            return MarkablesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EVENT_MENTION(self): return self.EVENT_MENTION
    def set_EVENT_MENTION(self, EVENT_MENTION): self.EVENT_MENTION = EVENT_MENTION
    def add_EVENT_MENTION(self, value): self.EVENT_MENTION.append(value)
    def insert_EVENT_MENTION_at(self, index, value): self.EVENT_MENTION.insert(index, value)
    def replace_EVENT_MENTION_at(self, index, value): self.EVENT_MENTION[index] = value
    def get_TIMEX3(self): return self.TIMEX3
    def set_TIMEX3(self, TIMEX3): self.TIMEX3 = TIMEX3
    def add_TIMEX3(self, value): self.TIMEX3.append(value)
    def insert_TIMEX3_at(self, index, value): self.TIMEX3.insert(index, value)
    def replace_TIMEX3_at(self, index, value): self.TIMEX3[index] = value
    def get_DCT(self): return self.DCT
    def set_DCT(self, DCT): self.DCT = DCT
    def get_ENTITY_MENTION(self): return self.ENTITY_MENTION
    def set_ENTITY_MENTION(self, ENTITY_MENTION): self.ENTITY_MENTION = ENTITY_MENTION
    def add_ENTITY_MENTION(self, value): self.ENTITY_MENTION.append(value)
    def insert_ENTITY_MENTION_at(self, index, value): self.ENTITY_MENTION.insert(index, value)
    def replace_ENTITY_MENTION_at(self, index, value): self.ENTITY_MENTION[index] = value
    def hasContent_(self):
        if (
            self.EVENT_MENTION or
            self.TIMEX3 or
            self.DCT is not None or
            self.ENTITY_MENTION
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarkablesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarkablesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarkablesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarkablesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarkablesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EVENT_MENTION_ in self.EVENT_MENTION:
            EVENT_MENTION_.export(outfile, level, namespace_, name_='EVENT_MENTION', pretty_print=pretty_print)
        for TIMEX3_ in self.TIMEX3:
            TIMEX3_.export(outfile, level, namespace_, name_='TIMEX3', pretty_print=pretty_print)
        if self.DCT is not None:
            self.DCT.export(outfile, level, namespace_, name_='DCT', pretty_print=pretty_print)
        for ENTITY_MENTION_ in self.ENTITY_MENTION:
            ENTITY_MENTION_.export(outfile, level, namespace_, name_='ENTITY_MENTION', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MarkablesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('EVENT_MENTION=[\n')
        level += 1
        for EVENT_MENTION_ in self.EVENT_MENTION:
            showIndent(outfile, level)
            outfile.write('model_.EVENT_MENTIONType(\n')
            EVENT_MENTION_.exportLiteral(outfile, level, name_='EVENT_MENTIONType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('TIMEX3=[\n')
        level += 1
        for TIMEX3_ in self.TIMEX3:
            showIndent(outfile, level)
            outfile.write('model_.TIMEX3Type(\n')
            TIMEX3_.exportLiteral(outfile, level, name_='TIMEX3Type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.DCT is not None:
            showIndent(outfile, level)
            outfile.write('DCT=model_.DCTType(\n')
            self.DCT.exportLiteral(outfile, level, name_='DCT')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ENTITY_MENTION=[\n')
        level += 1
        for ENTITY_MENTION_ in self.ENTITY_MENTION:
            showIndent(outfile, level)
            outfile.write('model_.ENTITY_MENTIONType(\n')
            ENTITY_MENTION_.exportLiteral(outfile, level, name_='ENTITY_MENTIONType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EVENT_MENTION':
            obj_ = EVENT_MENTIONType.factory()
            obj_.build(child_)
            self.EVENT_MENTION.append(obj_)
            obj_.original_tagname_ = 'EVENT_MENTION'
        elif nodeName_ == 'TIMEX3':
            obj_ = TIMEX3Type.factory()
            obj_.build(child_)
            self.TIMEX3.append(obj_)
            obj_.original_tagname_ = 'TIMEX3'
        elif nodeName_ == 'DCT':
            obj_ = DCTType.factory()
            obj_.build(child_)
            self.DCT = obj_
            obj_.original_tagname_ = 'DCT'
        elif nodeName_ == 'ENTITY_MENTION':
            obj_ = ENTITY_MENTIONType.factory()
            obj_.build(child_)
            self.ENTITY_MENTION.append(obj_)
            obj_.original_tagname_ = 'ENTITY_MENTION'
# end class MarkablesType


class EVENT_MENTIONType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, linkedTimestamp=None, m_id=None, linkedEntityName=None, token_anchor=None):
        self.original_tagname_ = None
        self.linkedTimestamp = _cast(None, linkedTimestamp)
        self.m_id = _cast(int, m_id)
        self.linkedEntityName = _cast(None, linkedEntityName)
        if token_anchor is None:
            self.token_anchor = []
        else:
            self.token_anchor = token_anchor
    def factory(*args_, **kwargs_):
        if EVENT_MENTIONType.subclass:
            return EVENT_MENTIONType.subclass(*args_, **kwargs_)
        else:
            return EVENT_MENTIONType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token_anchor(self): return self.token_anchor
    def set_token_anchor(self, token_anchor): self.token_anchor = token_anchor
    def add_token_anchor(self, value): self.token_anchor.append(value)
    def insert_token_anchor_at(self, index, value): self.token_anchor.insert(index, value)
    def replace_token_anchor_at(self, index, value): self.token_anchor[index] = value
    def get_linkedTimestamp(self): return self.linkedTimestamp
    def set_linkedTimestamp(self, linkedTimestamp): self.linkedTimestamp = linkedTimestamp
    def get_m_id(self): return self.m_id
    def set_m_id(self, m_id): self.m_id = m_id
    def get_linkedEntityName(self): return self.linkedEntityName
    def set_linkedEntityName(self, linkedEntityName): self.linkedEntityName = linkedEntityName
    def hasContent_(self):
        if (
            self.token_anchor
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EVENT_MENTIONType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EVENT_MENTIONType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EVENT_MENTIONType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EVENT_MENTIONType'):
        if self.linkedTimestamp is not None and 'linkedTimestamp' not in already_processed:
            already_processed.add('linkedTimestamp')
            outfile.write(' linkedTimestamp=%s' % (self.gds_format_string(quote_attrib(self.linkedTimestamp).encode(ExternalEncoding), input_name='linkedTimestamp'), ))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            outfile.write(' m_id="%s"' % self.gds_format_integer(self.m_id, input_name='m_id'))
        if self.linkedEntityName is not None and 'linkedEntityName' not in already_processed:
            already_processed.add('linkedEntityName')
            outfile.write(' linkedEntityName=%s' % (self.gds_format_string(quote_attrib(self.linkedEntityName).encode(ExternalEncoding), input_name='linkedEntityName'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='EVENT_MENTIONType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for token_anchor_ in self.token_anchor:
            token_anchor_.export(outfile, level, namespace_, name_='token_anchor', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='EVENT_MENTIONType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.linkedTimestamp is not None and 'linkedTimestamp' not in already_processed:
            already_processed.add('linkedTimestamp')
            showIndent(outfile, level)
            outfile.write('linkedTimestamp="%s",\n' % (self.linkedTimestamp,))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            showIndent(outfile, level)
            outfile.write('m_id=%d,\n' % (self.m_id,))
        if self.linkedEntityName is not None and 'linkedEntityName' not in already_processed:
            already_processed.add('linkedEntityName')
            showIndent(outfile, level)
            outfile.write('linkedEntityName="%s",\n' % (self.linkedEntityName,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('token_anchor=[\n')
        level += 1
        for token_anchor_ in self.token_anchor:
            showIndent(outfile, level)
            outfile.write('model_.token_anchorType(\n')
            token_anchor_.exportLiteral(outfile, level, name_='token_anchorType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('linkedTimestamp', node)
        if value is not None and 'linkedTimestamp' not in already_processed:
            already_processed.add('linkedTimestamp')
            self.linkedTimestamp = value
        value = find_attr_value_('m_id', node)
        if value is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            try:
                self.m_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('linkedEntityName', node)
        if value is not None and 'linkedEntityName' not in already_processed:
            already_processed.add('linkedEntityName')
            self.linkedEntityName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token_anchor':
            obj_ = token_anchorType.factory()
            obj_.build(child_)
            self.token_anchor.append(obj_)
            obj_.original_tagname_ = 'token_anchor'
# end class EVENT_MENTIONType


class token_anchorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, t_id=None):
        self.original_tagname_ = None
        self.t_id = _cast(int, t_id)
    def factory(*args_, **kwargs_):
        if token_anchorType.subclass:
            return token_anchorType.subclass(*args_, **kwargs_)
        else:
            return token_anchorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_t_id(self): return self.t_id
    def set_t_id(self, t_id): self.t_id = t_id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='token_anchorType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='token_anchorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='token_anchorType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='token_anchorType'):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            outfile.write(' t_id="%s"' % self.gds_format_integer(self.t_id, input_name='t_id'))
    def exportChildren(self, outfile, level, namespace_='', name_='token_anchorType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='token_anchorType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            showIndent(outfile, level)
            outfile.write('t_id=%d,\n' % (self.t_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('t_id', node)
        if value is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            try:
                self.t_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class token_anchorType


class TIMEX3Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, m_id=None, functionInDocument=None, value=None, token_anchor=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.m_id = _cast(int, m_id)
        self.functionInDocument = _cast(None, functionInDocument)
        self.value = _cast(None, value)
        if token_anchor is None:
            self.token_anchor = []
        else:
            self.token_anchor = token_anchor
    def factory(*args_, **kwargs_):
        if TIMEX3Type.subclass:
            return TIMEX3Type.subclass(*args_, **kwargs_)
        else:
            return TIMEX3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token_anchor(self): return self.token_anchor
    def set_token_anchor(self, token_anchor): self.token_anchor = token_anchor
    def add_token_anchor(self, value): self.token_anchor.append(value)
    def insert_token_anchor_at(self, index, value): self.token_anchor.insert(index, value)
    def replace_token_anchor_at(self, index, value): self.token_anchor[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_m_id(self): return self.m_id
    def set_m_id(self, m_id): self.m_id = m_id
    def get_functionInDocument(self): return self.functionInDocument
    def set_functionInDocument(self, functionInDocument): self.functionInDocument = functionInDocument
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (
            self.token_anchor
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TIMEX3Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TIMEX3Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TIMEX3Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TIMEX3Type'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            outfile.write(' m_id="%s"' % self.gds_format_integer(self.m_id, input_name='m_id'))
        if self.functionInDocument is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            outfile.write(' functionInDocument=%s' % (self.gds_format_string(quote_attrib(self.functionInDocument).encode(ExternalEncoding), input_name='functionInDocument'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TIMEX3Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for token_anchor_ in self.token_anchor:
            token_anchor_.export(outfile, level, namespace_, name_='token_anchor', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='TIMEX3Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            showIndent(outfile, level)
            outfile.write('m_id=%d,\n' % (self.m_id,))
        if self.functionInDocument is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            showIndent(outfile, level)
            outfile.write('functionInDocument="%s",\n' % (self.functionInDocument,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('token_anchor=[\n')
        level += 1
        for token_anchor_ in self.token_anchor:
            showIndent(outfile, level)
            outfile.write('model_.token_anchorType1(\n')
            token_anchor_.exportLiteral(outfile, level, name_='token_anchorType1')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('m_id', node)
        if value is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            try:
                self.m_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('functionInDocument', node)
        if value is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            self.functionInDocument = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token_anchor':
            obj_ = token_anchorType1.factory()
            obj_.build(child_)
            self.token_anchor.append(obj_)
            obj_.original_tagname_ = 'token_anchor'
# end class TIMEX3Type


class token_anchorType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, t_id=None):
        self.original_tagname_ = None
        self.t_id = _cast(int, t_id)
    def factory(*args_, **kwargs_):
        if token_anchorType1.subclass:
            return token_anchorType1.subclass(*args_, **kwargs_)
        else:
            return token_anchorType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_t_id(self): return self.t_id
    def set_t_id(self, t_id): self.t_id = t_id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='token_anchorType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='token_anchorType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='token_anchorType1', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='token_anchorType1'):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            outfile.write(' t_id="%s"' % self.gds_format_integer(self.t_id, input_name='t_id'))
    def exportChildren(self, outfile, level, namespace_='', name_='token_anchorType1', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='token_anchorType1'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            showIndent(outfile, level)
            outfile.write('t_id=%d,\n' % (self.t_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('t_id', node)
        if value is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            try:
                self.t_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class token_anchorType1


class DCTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, m_id=None, functionInDocument=None, value=None, token_anchor=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.m_id = _cast(int, m_id)
        self.functionInDocument = _cast(None, functionInDocument)
        self.value = _cast(None, value)
        if token_anchor is None:
            self.token_anchor = []
        else:
            self.token_anchor = token_anchor
    def factory(*args_, **kwargs_):
        if DCTType.subclass:
            return DCTType.subclass(*args_, **kwargs_)
        else:
            return DCTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token_anchor(self): return self.token_anchor
    def set_token_anchor(self, token_anchor): self.token_anchor = token_anchor
    def add_token_anchor(self, value): self.token_anchor.append(value)
    def insert_token_anchor_at(self, index, value): self.token_anchor.insert(index, value)
    def replace_token_anchor_at(self, index, value): self.token_anchor[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_m_id(self): return self.m_id
    def set_m_id(self, m_id): self.m_id = m_id
    def get_functionInDocument(self): return self.functionInDocument
    def set_functionInDocument(self, functionInDocument): self.functionInDocument = functionInDocument
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (
            self.token_anchor
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DCTType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DCTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DCTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DCTType'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            outfile.write(' m_id="%s"' % self.gds_format_integer(self.m_id, input_name='m_id'))
        if self.functionInDocument is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            outfile.write(' functionInDocument=%s' % (self.gds_format_string(quote_attrib(self.functionInDocument).encode(ExternalEncoding), input_name='functionInDocument'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DCTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for token_anchor_ in self.token_anchor:
            token_anchor_.export(outfile, level, namespace_, name_='token_anchor', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DCTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            showIndent(outfile, level)
            outfile.write('m_id=%d,\n' % (self.m_id,))
        if self.functionInDocument is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            showIndent(outfile, level)
            outfile.write('functionInDocument="%s",\n' % (self.functionInDocument,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value="%s",\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('token_anchor=[\n')
        level += 1
        for token_anchor_ in self.token_anchor:
            showIndent(outfile, level)
            outfile.write('model_.token_anchorType2(\n')
            token_anchor_.exportLiteral(outfile, level, name_='token_anchorType2')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('m_id', node)
        if value is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            try:
                self.m_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('functionInDocument', node)
        if value is not None and 'functionInDocument' not in already_processed:
            already_processed.add('functionInDocument')
            self.functionInDocument = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token_anchor':
            obj_ = token_anchorType2.factory()
            obj_.build(child_)
            self.token_anchor.append(obj_)
            obj_.original_tagname_ = 'token_anchor'
# end class DCTType


class token_anchorType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, t_id=None):
        self.original_tagname_ = None
        self.t_id = _cast(int, t_id)
    def factory(*args_, **kwargs_):
        if token_anchorType2.subclass:
            return token_anchorType2.subclass(*args_, **kwargs_)
        else:
            return token_anchorType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_t_id(self): return self.t_id
    def set_t_id(self, t_id): self.t_id = t_id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='token_anchorType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='token_anchorType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='token_anchorType2', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='token_anchorType2'):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            outfile.write(' t_id="%s"' % self.gds_format_integer(self.t_id, input_name='t_id'))
    def exportChildren(self, outfile, level, namespace_='', name_='token_anchorType2', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='token_anchorType2'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            showIndent(outfile, level)
            outfile.write('t_id=%d,\n' % (self.t_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('t_id', node)
        if value is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            try:
                self.t_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class token_anchorType2


class ENTITY_MENTIONType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, m_id=None, type_=None, token_anchor=None):
        self.original_tagname_ = None
        self.m_id = _cast(int, m_id)
        self.type_ = _cast(None, type_)
        if token_anchor is None:
            self.token_anchor = []
        else:
            self.token_anchor = token_anchor
    def factory(*args_, **kwargs_):
        if ENTITY_MENTIONType.subclass:
            return ENTITY_MENTIONType.subclass(*args_, **kwargs_)
        else:
            return ENTITY_MENTIONType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_token_anchor(self): return self.token_anchor
    def set_token_anchor(self, token_anchor): self.token_anchor = token_anchor
    def add_token_anchor(self, value): self.token_anchor.append(value)
    def insert_token_anchor_at(self, index, value): self.token_anchor.insert(index, value)
    def replace_token_anchor_at(self, index, value): self.token_anchor[index] = value
    def get_m_id(self): return self.m_id
    def set_m_id(self, m_id): self.m_id = m_id
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def hasContent_(self):
        if (
            self.token_anchor
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ENTITY_MENTIONType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ENTITY_MENTIONType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ENTITY_MENTIONType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ENTITY_MENTIONType'):
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            outfile.write(' m_id="%s"' % self.gds_format_integer(self.m_id, input_name='m_id'))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ENTITY_MENTIONType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for token_anchor_ in self.token_anchor:
            token_anchor_.export(outfile, level, namespace_, name_='token_anchor', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ENTITY_MENTIONType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.m_id is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            showIndent(outfile, level)
            outfile.write('m_id=%d,\n' % (self.m_id,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('token_anchor=[\n')
        level += 1
        for token_anchor_ in self.token_anchor:
            showIndent(outfile, level)
            outfile.write('model_.token_anchorType3(\n')
            token_anchor_.exportLiteral(outfile, level, name_='token_anchorType3')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('m_id', node)
        if value is not None and 'm_id' not in already_processed:
            already_processed.add('m_id')
            try:
                self.m_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'token_anchor':
            obj_ = token_anchorType3.factory()
            obj_.build(child_)
            self.token_anchor.append(obj_)
            obj_.original_tagname_ = 'token_anchor'
# end class ENTITY_MENTIONType


class token_anchorType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, t_id=None):
        self.original_tagname_ = None
        self.t_id = _cast(int, t_id)
    def factory(*args_, **kwargs_):
        if token_anchorType3.subclass:
            return token_anchorType3.subclass(*args_, **kwargs_)
        else:
            return token_anchorType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_t_id(self): return self.t_id
    def set_t_id(self, t_id): self.t_id = t_id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='token_anchorType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='token_anchorType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='token_anchorType3', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='token_anchorType3'):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            outfile.write(' t_id="%s"' % self.gds_format_integer(self.t_id, input_name='t_id'))
    def exportChildren(self, outfile, level, namespace_='', name_='token_anchorType3', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='token_anchorType3'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.t_id is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            showIndent(outfile, level)
            outfile.write('t_id=%d,\n' % (self.t_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('t_id', node)
        if value is not None and 't_id' not in already_processed:
            already_processed.add('t_id')
            try:
                self.t_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class token_anchorType3


GDSClassesMapping = {
    'Markables': MarkablesType,
    'token': tokenType,
    'TIMEX3': TIMEX3Type,
    'token_anchor': token_anchorType3,
    'DCT': DCTType,
    'ENTITY_MENTION': ENTITY_MENTIONType,
    'EVENT_MENTION': EVENT_MENTIONType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from cat_parser import *\n\n')
        sys.stdout.write('import cat_parser as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DCTType",
    "Document",
    "ENTITY_MENTIONType",
    "EVENT_MENTIONType",
    "MarkablesType",
    "TIMEX3Type",
    "tokenType",
    "token_anchorType",
    "token_anchorType1",
    "token_anchorType2",
    "token_anchorType3"
]
